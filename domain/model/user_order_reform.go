// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type userOrderViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userOrderViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("user_orders").
func (v *userOrderViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userOrderViewType) Columns() []string {
	return []string{"name", "city", "state", "product_id", "quantity", "total"}
}

// NewStruct makes a new struct for that view or table.
func (v *userOrderViewType) NewStruct() reform.Struct {
	return new(UserOrder)
}

// UserOrderView represents user_orders view or table in SQL database.
var UserOrderView = &userOrderViewType{
	s: parse.StructInfo{Type: "UserOrder", SQLSchema: "", SQLName: "user_orders", Fields: []parse.FieldInfo{{Name: "Name", Type: "string", Column: "name"}, {Name: "City", Type: "string", Column: "city"}, {Name: "State", Type: "string", Column: "state"}, {Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "Quantity", Type: "int32", Column: "quantity"}, {Name: "Total", Type: "float64", Column: "total"}}, PKFieldIndex: -1},
	z: new(UserOrder).Values(),
}

// String returns a string representation of this struct or record.
func (s UserOrder) String() string {
	res := make([]string, 6)
	res[0] = "Name: " + reform.Inspect(s.Name, true)
	res[1] = "City: " + reform.Inspect(s.City, true)
	res[2] = "State: " + reform.Inspect(s.State, true)
	res[3] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[4] = "Quantity: " + reform.Inspect(s.Quantity, true)
	res[5] = "Total: " + reform.Inspect(s.Total, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *UserOrder) Values() []interface{} {
	return []interface{}{
		s.Name,
		s.City,
		s.State,
		s.ProductID,
		s.Quantity,
		s.Total,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *UserOrder) Pointers() []interface{} {
	return []interface{}{
		&s.Name,
		&s.City,
		&s.State,
		&s.ProductID,
		&s.Quantity,
		&s.Total,
	}
}

// View returns View object for that struct.
func (s *UserOrder) View() reform.View {
	return UserOrderView
}

// check interfaces
var (
	_ reform.View   = UserOrderView
	_ reform.Struct = (*UserOrder)(nil)
	_ fmt.Stringer  = (*UserOrder)(nil)
)

func init() {
	parse.AssertUpToDate(&UserOrderView.s, new(UserOrder))
}
